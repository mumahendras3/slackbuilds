s6 is a small suite of programs for UNIX, designed to allow process
supervision (a.k.a service supervision), in the line of daemontools
and runit, as well as various operations on processes and daemons. It
is meant to be a toolbox for low-level process and service
administration, providing different sets of independent tools that can
be used within or without the framework, and that can be assembled
together to achieve powerful functionality with a very small amount of
code.

Examples of things you can do by assembling together several programs
provided by s6 - besides process supervision:

- syslogd functionality, using much less resources than the traditional
  syslogd.
- Reliable service readiness notification, which is the basis for
  service dependency management.
- Controlled privileged gain as with sudo, without using any suid
  programs.
- The useful parts of socket activation without having to change
  application code or link servers against any specific library, and
  without having to switch to any specific init system.

s6 requires skalibs and execline at build-time but not at run-time if
it's linked against the static version of the skalibs and execline
libraries. skalibs and execline become run-time requirements if you link
it against the shared versions of the skalibs and execline libraries.

Some hints for using this package alongside Slackware's default
init system:

I added the following to my /etc/inittab:

    # S6
    sv:12345:respawn:/bin/s6-svscanboot

Then did a 'telinit q' to start it.

Note that the default s6-svscanboot provided disables polling
(-t0). So after adding a new service to /service you should call:

    /bin/s6-svscanctl -a /service

where /service is a directory that contains all the services that
s6 will supervise. You can change it to other places such as /etc/service,
/var/service, etc. and edit the provided /bin/s6-svscanboot script
to change the scan directory to the new service directory (i.e. change
/service in the script to the new service directory).
